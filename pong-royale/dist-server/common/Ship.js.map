{"version":3,"sources":["../../src/common/Ship.js"],"names":["game","p2","Ship","gameEngine","physicsEngine","shape","Circle","width","height","radius","physicsObj","Body","mass","damping","angularDamping","position","x","y","angularVelocity","fixedRotation","place","fixedX","fixedY","addShape","material","Material","world","addContactMaterial","ContactMaterial","wall_material","restitution","relaxation","friction","addBody","removeBody","lives","other","percent","Object","assign","type","BaseTypes","TYPES","STRING","INT8","PhysicalObject2D"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAIA,IAAI,GAAG,IAAX;AACA,IAAIC,EAAE,GAAG,IAAT;;IAEqBC,I;;;;;;;;;;;;;iCAeJC,U,EAAY;AACrBH,MAAAA,IAAI,GAAGG,UAAP;AACAF,MAAAA,EAAE,GAAGE,UAAU,CAACC,aAAX,CAAyBH,EAA9B;AAIA,UAAII,KAAK,GAAG,KAAKA,KAAL,GAAa,IAAIJ,EAAE,CAACK,MAAP,CAAc;AAAEC,QAAAA,KAAK,EAAE,CAAT;AAAYC,QAAAA,MAAM,EAAE,GAApB;AAAyBC,QAAAA,MAAM,EAAE;AAAjC,OAAd,CAAzB;AAEA,WAAKC,UAAL,GAAkB,IAAIT,EAAE,CAACU,IAAP,CAAY;AAC1BC,QAAAA,IAAI,EAAE,CADoB;AAE1BC,QAAAA,OAAO,EAAE,IAFiB;AAG1BC,QAAAA,cAAc,EAAE,CAHU;AAI1BC,QAAAA,QAAQ,EAAG,CAAC,KAAKA,QAAL,CAAcC,CAAf,EAAkB,KAAKD,QAAL,CAAcE,CAAhC,CAJe;AAK1BC,QAAAA,eAAe,EAAE,CALS;AAMzBC,QAAAA,aAAa,EAAE;AANU,OAAZ,CAAlB;;AASA,UAAG,KAAKC,KAAL,KAAe,MAAf,IAAyB,KAAKA,KAAL,KAAe,OAA3C,EAAmD;AAC/C,aAAKV,UAAL,CAAgBW,MAAhB,GAAyB,IAAzB;AACH,OAFD,MAGK,IAAG,KAAKD,KAAL,KAAe,KAAf,IAAwB,KAAKA,KAAL,KAAe,KAA1C,EAAgD;AACjD,aAAKV,UAAL,CAAgBY,MAAhB,GAAyB,IAAzB;AACH;;AAID,WAAKZ,UAAL,CAAgBa,QAAhB,CAAyBlB,KAAzB;AAEAA,MAAAA,KAAK,CAACmB,QAAN,GAAiB,IAAIvB,EAAE,CAACwB,QAAP,EAAjB;AAGAtB,MAAAA,UAAU,CAACC,aAAX,CAAyBsB,KAAzB,CAA+BC,kBAA/B,CAAkD,IAAI1B,EAAE,CAAC2B,eAAP,CAAuBvB,KAAK,CAACmB,QAA7B,EAAuCxB,IAAI,CAAC6B,aAA5C,EAA2D;AACzGC,QAAAA,WAAW,EAAE,GAD4F;AAEzGC,QAAAA,UAAU,EAAE,GAF6F;AAGzGC,QAAAA,QAAQ,EAAE;AAH+F,OAA3D,CAAlD;AAOA7B,MAAAA,UAAU,CAACC,aAAX,CAAyBsB,KAAzB,CAA+BO,OAA/B,CAAuC,KAAKvB,UAA5C;AACH;;;sCAEiBP,U,EAAY;AAC1BH,MAAAA,IAAI,CAACI,aAAL,CAAmBsB,KAAnB,CAAyBQ,UAAzB,CAAoC,KAAKxB,UAAzC;AACH;;;+BAEU;AACP,mHAA0C,KAAKyB,KAA/C;AACH;;;2BAEMC,K,EAAO;AACV,uEAAaA,KAAb;;AACA,WAAKhB,KAAL,GAAagB,KAAK,CAAChB,KAAnB;AACA,WAAKe,KAAL,GAAaC,KAAK,CAACD,KAAnB;AACH;;;AA3DD;AACA;wBACc;AACV,aAAO;AAAEpB,QAAAA,QAAQ,EAAE;AAAEsB,UAAAA,OAAO,EAAE;AAAX;AAAZ,OAAP;AACH;;;wBAXsB;AACnB,aAAOC,MAAM,CAACC,MAAP,CAAc;AACjBnB,QAAAA,KAAK,EAAE;AAAEoB,UAAAA,IAAI,EAAEC,mBAAUC,KAAV,CAAgBC;AAAxB,SADU;AAEjBR,QAAAA,KAAK,EAAE;AAAEK,UAAAA,IAAI,EAAEC,mBAAUC,KAAV,CAAgBE;AAAxB;AAFU,OAAd,iDAAP;AAIH;;;;EAP6BC,yB","sourcesContent":["import { PhysicalObject2D, BaseTypes } from 'lance-gg';\n\nlet game = null;\nlet p2 = null;\n\nexport default class Ship extends PhysicalObject2D {\n\n    static get netScheme() {\n        return Object.assign({\n            place: { type: BaseTypes.TYPES.STRING },\n            lives: { type: BaseTypes.TYPES.INT8 }\n        }, super.netScheme);\n    }\n\n    // no position bending if difference is larger than 4.0 (i.e. wrap beyond bounds),\n    // no angular velocity bending, no local angle bending\n    get bending() {\n        return { position: { percent: 1.0 } };\n    }\n\n    onAddToWorld(gameEngine) {\n        game = gameEngine;\n        p2 = gameEngine.physicsEngine.p2;\n\n\n\n        let shape = this.shape = new p2.Circle({ width: 2, height: 0.5, radius: 1 });\n        \n        this.physicsObj = new p2.Body({\n            mass: 1,\n            damping: 0.99,\n            angularDamping: 0,\n            position : [this.position.x, this.position.y],\n            angularVelocity: 0,\n             fixedRotation: true\n        });\n\n        if(this.place === 'left' || this.place === 'right'){\n            this.physicsObj.fixedX = true;\n        }\n        else if(this.place === 'top' || this.place === 'bot'){\n            this.physicsObj.fixedY = true;\n        }\n\n\n\n        this.physicsObj.addShape(shape);\n\n        shape.material = new p2.Material();\n\n\n        gameEngine.physicsEngine.world.addContactMaterial(new p2.ContactMaterial(shape.material, game.wall_material, {\n            restitution: 0.0,\n            relaxation: 1e6,\n            friction: 0\n        }))\n\n\n        gameEngine.physicsEngine.world.addBody(this.physicsObj);\n    }\n\n    onRemoveFromWorld(gameEngine) {\n        game.physicsEngine.world.removeBody(this.physicsObj);\n    }\n\n    toString() {\n        return `Ship::${super.toString()} lives=${this.lives}`;\n    }\n\n    syncTo(other) {\n        super.syncTo(other);\n        this.place = other.place;\n        this.lives = other.lives;\n    }\n}\n"],"file":"Ship.js"}