{"version":3,"sources":["../../src/common/Ball.js"],"names":["game","p2","Ball","gameEngine","physicsEngine","physicsObj","Body","mass","position","velocity","x","y","damping","angularVelocity","addShape","Circle","radius","ballRadius","balls","push","world","addBody","removeBody","other","level","percent","Object","assign","type","BaseTypes","TYPES","INT16","PhysicalObject2D"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAIA,IAAI,GAAG,IAAX;AACA,IAAIC,EAAE,GAAG,IAAT;;IAEqBC,I;;;;;;;;;;;;;AAcjB;mCACe;AACXF,MAAAA,IAAI,GAAG,KAAKG,UAAZ;AACAF,MAAAA,EAAE,GAAGD,IAAI,CAACI,aAAL,CAAmBH,EAAxB;AACA,WAAKI,UAAL,GAAkB,IAAIJ,EAAE,CAACK,IAAP,CAAY;AAC1BC,QAAAA,IAAI,EAAE,GADoB;AAE1BC,QAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,CAFgB;AAG1BC,QAAAA,QAAQ,EAAG,CAAC,KAAKA,QAAL,CAAcC,CAAf,EAAkB,KAAKD,QAAL,CAAcE,CAAhC,CAHe;AAI1BC,QAAAA,OAAO,EAAE,CAJiB;AAK1BC,QAAAA,eAAe,EAAE;AALS,OAAZ,CAAlB;AAQA,WAAKR,UAAL,CAAgBS,QAAhB,CAAyB,IAAIb,EAAE,CAACc,MAAP,CAAc;AAAE;AACrCC,QAAAA,MAAM,EAAEhB,IAAI,CAACiB;AADsB,OAAd,CAAzB;AAGA;;;;;;;;AAQAjB,MAAAA,IAAI,CAACkB,KAAL,CAAWC,IAAX,CAAgB,KAAKd,UAArB;AAEAL,MAAAA,IAAI,CAACI,aAAL,CAAmBgB,KAAnB,CAAyBC,OAAzB,CAAiC,KAAKhB,UAAtC;AACH,K,CAED;;;;wCACoB;AAChBL,MAAAA,IAAI,CAACI,aAAL,CAAmBgB,KAAnB,CAAyBE,UAAzB,CAAoC,KAAKjB,UAAzC;AACH;;;2BAGMkB,K,EAAO;AACV,uEAAaA,KAAb;AACH;;;+BAEU;AACP,sHAA6C,KAAKC,KAAlD;AACH;;;AA9CD;AACA;wBACc;AACV,aAAO;AAAEhB,QAAAA,QAAQ,EAAE;AAAEiB,UAAAA,OAAO,EAAE;AAAX;AAAZ,OAAP;AACH;;;wBAVsB;AACnB,aAAOC,MAAM,CAACC,MAAP,CAAc;AACjBH,QAAAA,KAAK,EAAE;AAAEI,UAAAA,IAAI,EAAEC,mBAAUC,KAAV,CAAgBC;AAAxB;AADU,OAAd,iDAAP;AAGH;;;;EAN6BC,yB","sourcesContent":["import { PhysicalObject2D, BaseTypes } from 'lance-gg';\n\nlet game = null;\nlet p2 = null;\n\nexport default class Ball extends PhysicalObject2D {\n\n    static get netScheme() {\n        return Object.assign({\n            level: { type: BaseTypes.TYPES.INT16 }\n        }, super.netScheme);\n    }\n\n    // position bending: bend fully to server position in each sync [percent=1.0],\n    // unless the position difference is larger than 4.0 (i.e. wrap beyond bounds)\n    get bending() {\n        return { position: { percent: 1.0 } };\n    }\n\n    // on add-to-world, create a physics body\n    onAddToWorld() {\n        game = this.gameEngine;\n        p2 = game.physicsEngine.p2;\n        this.physicsObj = new p2.Body({\n            mass: 0.1,\n            position: [0, 0],\n            velocity : [this.velocity.x, this.velocity.y],\n            damping: 0,\n            angularVelocity: 0\n        });\n\n        this.physicsObj.addShape(new p2.Circle({ // Give it a circle shape\n            radius: game.ballRadius\n        }));\n        /*\n        this.physicsObj.addShape(new p2.Circle({\n            radius: game.asteroidRadius * (game.numAsteroidLevels - this.level) / game.numAsteroidLevels,\n            collisionGroup: game.ASTEROID, // Belongs to the ASTEROID group\n            collisionMask: game.BULLET | game.SHIP // Can collide with the BULLET or SHIP group\n        }));\n        */\n\n        game.balls.push(this.physicsObj);\n\n        game.physicsEngine.world.addBody(this.physicsObj);\n    }\n\n    // on remove-from-world, remove the physics body\n    onRemoveFromWorld() {\n        game.physicsEngine.world.removeBody(this.physicsObj);\n    }\n\n\n    syncTo(other) {\n        super.syncTo(other);\n    }\n\n    toString() {\n        return `Asteroid::${super.toString()} Level${this.level}`;\n    }\n}\n"],"file":"Ball.js"}