{"version":3,"sources":["../../src/server/AsteroidsServerEngine.js"],"names":["deleteBall","AsteroidsServerEngine","io","gameEngine","inputOptions","physicsEngine","world","on","handleCollision","bind","postStepCustom","addWalls","addball","evt","ball","A","B","forEachObject","id","obj","physicsObj","bodyA","bodyB","Wall","Ball","shipsnb","getShipsNb","walls_by_alias","bot","ships","ship","lives","top","left","right","player","bulletId","objects","trace","removeObjectFromWorld","stepNumber","isReenact","socket","addShip","playerId","socketId","queryObjects","o","ServerEngine"],"mappings":"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","sourcesContent":["import { ServerEngine, TwoVector } from 'lance-gg';\nimport Wall from '../common/Wall';\nimport Ball from '../common/Ball';\n\nvar deleteBall = null;\n\nexport default class AsteroidsServerEngine extends ServerEngine {\n\n    constructor(io, gameEngine, inputOptions) {\n        super(io, gameEngine, inputOptions);\n        gameEngine.physicsEngine.world.on('beginContact', this.handleCollision.bind(this));\n        this.gameEngine.on('postStep', this.postStepCustom.bind(this));\n        //gameEngine.on('shoot', this.shoot.bind(this));\n    }\n\n    start() {\n        super.start();\n        this.gameEngine.addWalls();\n        this.gameEngine.addball();\n        this.gameEngine.addball();\n    }\n\n    // handle a collision on server only\n    handleCollision(evt) {\n\n        /*\n        // identify the two objects which collided\n        let A;\n        let B;\n        this.gameEngine.world.forEachObject((id, obj) => {\n            if (obj.physicsObj === evt.bodyA) A = obj;\n            if (obj.physicsObj === evt.bodyB) B = obj;\n        });\n\n        // check bullet-asteroid and ship-asteroid collisions\n        if (!A || !B) return;\n        this.gameEngine.trace.trace(() => `collision between A=${A.toString()}`);\n        this.gameEngine.trace.trace(() => `collision and     B=${B.toString()}`);\n        if (A instanceof Bullet && B instanceof Asteroid) this.gameEngine.explode(B, A);\n        if (B instanceof Bullet && A instanceof Asteroid) this.gameEngine.explode(A, B);\n        if (A instanceof Ship && B instanceof Asteroid) this.kill(A);\n        if (B instanceof Ship && A instanceof Asteroid) this.kill(B);\n\n        // restart game\n        if (this.gameEngine.world.queryObjects({ instanceType: Asteroid }).length === 0) this.gameEngine.addAsteroids();\n        */\n\n        let ball = null;\n\n        let A;\n        let B;\n\n        this.gameEngine.world.forEachObject((id, obj) => {\n            if (obj.physicsObj === evt.bodyA) A = obj;\n            if (obj.physicsObj === evt.bodyB) B = obj;\n        });\n\n        if (A instanceof Wall && B instanceof Ball) {\n            ball = B;\n        } else if (B instanceof Wall && A instanceof Ball) {\n            ball = A;\n        }\n\n        let shipsnb = this.gameEngine.getShipsNb();\n\n        let walls_by_alias = this.gameEngine.walls_by_alias;\n\n        \n\n        if (ball && (shipsnb[0]>0 && (A == walls_by_alias.bot || B == walls_by_alias.bot))) {\n           \n            deleteBall = ball;\n            for(let ship of this.gameEngine.ships['bot']){\n                ship.lives--;\n            }\n        \n            \n        }\n\n        if (ball && (shipsnb[1]>0 && (A == walls_by_alias.top || B == walls_by_alias.top))) {\n            deleteBall = ball;\n            for(let ship of this.gameEngine.ships['top']){\n                ship.lives--;\n            }\n        }\n\n        if (ball && (shipsnb[2]>0 && (A == walls_by_alias.left || B == walls_by_alias.left.physicsObj))) {\n            \n            deleteBall = ball;\n            for(let ship of this.gameEngine.ships['left']){\n                ship.lives--;\n            }\n        }\n\n        if (ball && (shipsnb[3]>0 && (A == walls_by_alias.right || B == walls_by_alias.right))) {\n            deleteBall = ball;\n            for(let ship of this.gameEngine.ships['right']){\n                ship.lives--;\n            }\n        }\n\n\n    }\n\n    // shooting creates a bullet\n    shoot(player) {\n\n        //this.gameEngine.timer.add(this.gameEngine.bulletLifeTime, this.destroyBullet, this, [obj.id]);\n    }\n\n    // destroy the missile if it still exists\n    destroyBullet(bulletId) {\n        \n        if (this.gameEngine.world.objects[bulletId]) {\n            this.gameEngine.trace.trace(() => `bullet[${bulletId}] destroyed`);\n            this.gameEngine.removeObjectFromWorld(bulletId);\n        }\n    }\n\n    kill(ship) {\n        if(ship.lives-- === 0) this.gameEngine.removeObjectFromWorld(ship.id);\n    }\n\n    postStepCustom(stepNumber, isReenact){\n\n\n        if(deleteBall){\n            this.gameEngine.removeObjectFromWorld(deleteBall);\n            this.gameEngine.addball();\n            deleteBall = null;\n        }\n\n    }\n\n    onPlayerConnected(socket) {\n        super.onPlayerConnected(socket);\n        this.gameEngine.addShip(socket.playerId);\n    }\n\n    onPlayerDisconnected(socketId, playerId) {\n        super.onPlayerDisconnected(socketId, playerId);\n        for (let o of this.gameEngine.world.queryObjects({ playerId }))\n            this.gameEngine.removeObjectFromWorld(o.id);\n    }\n}\n"],"file":"AsteroidsServerEngine.js"}